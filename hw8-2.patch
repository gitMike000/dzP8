diff --git a/include/SBomber.h b/include/SBomber.h
index 3ce1b9c..a2cd7ae 100644
--- a/include/SBomber.h
+++ b/include/SBomber.h
@@ -25,6 +25,8 @@ public:
     void MoveObjects();
     void CheckObjects();
 
+    void AnimateScrolling();
+
 private:
 
     void CheckPlaneAndLevelGUI();
@@ -50,4 +52,5 @@ private:
     uint64_t startTime, finishTime, passedTime;
     uint16_t bombsNumber, deltaTime, fps;
     int16_t score;
-};
\ No newline at end of file
+};
+
diff --git a/include/kbd.h b/include/kbd.h
new file mode 100644
index 0000000..6b53c75
--- /dev/null
+++ b/include/kbd.h
@@ -0,0 +1,32 @@
+#ifndef KBD_H
+#define KBD_H
+
+#include <iostream>
+
+#include <unistd.h>
+#include <fcntl.h>
+#include <termios.h>
+#include <sys/ioctl.h>
+
+static int _kbhit()
+{
+    static const int STDIN = 0;
+    static bool initialized = false;
+
+    if (!initialized)
+    {
+        // Use termios to turn off line buffering
+        termios term;
+        tcgetattr(STDIN, &term);
+        term.c_lflag &= ~ICANON;
+        tcsetattr(STDIN, TCSANOW, &term);
+        setbuf(stdin, NULL);
+        initialized = true;
+    }
+
+    int bytesWaiting;
+    ioctl(STDIN, FIONREAD, &bytesWaiting);
+    return bytesWaiting;
+}
+
+#endif // KBD_H
diff --git a/src/SBomber.cpp b/src/SBomber.cpp
index 4c0eb99..67b707c 100644
--- a/src/SBomber.cpp
+++ b/src/SBomber.cpp
@@ -10,6 +10,8 @@
 #include <chrono>
 #include <thread>
 
+#include "include/kbd.h"
+
 SBomber::SBomber()
   : exitFlag(false), startTime(0), finishTime(0), deltaTime(0), passedTime(0),
     fps(0), bombsNumber(10), score(0) {
@@ -309,3 +311,98 @@ void SBomber::DropBomb() {
     score -= Bomb::BombCost;
   }
 }
+
+static const size_t ScrollHeight = 60;
+static const size_t ScrollWidth = 30;
+static const char* ppScroll[ScrollHeight] =
+                        {"                          	",
+                        "                          	",
+                        "                          	",
+                        "                          	",
+                        "                          	",
+                        "                          	",
+                        "                          	",
+                        "                          	",
+                        "                          	",
+                        "  Project manager:        	",
+                        " 	 Ivan Vasilevich      	",
+                        "                          	",
+                        "  Developers:             	",
+                        " 	 Nikolay Gavrilov     	",
+                        " 	 Dmitriy Sidelnikov   	",
+                        " 	 Eva Brown            	",
+                        "                          	",
+                        "  Designers:              	",
+                        " 	 Anna Pachenkova      	",
+                        " 	 Elena Shvaiber       	",
+                        "                          	",
+                        "                          	",
+                        "                          	",
+                        "                          	",
+                        "                          	",
+                        "                          	",
+                        "                          	",
+                        "                          	",
+                        "                          	",
+                        "                          	",
+"                          	",
+"                          	",
+"                          	",
+"                          	",
+"                          	",
+"                          	",
+"                          	",
+"                          	",
+"                          	",
+"                          	",
+" 	                      	",
+"                          	",
+"                          	",
+" 	                      	",
+" 	                      	",
+" 	                      	",
+"                          	",
+"                          	",
+" 	                      	",
+" 	                      	",
+"                          	",
+"                          	",
+"                          	",
+"                          	",
+"                          	",
+"                          	",
+"                          	",
+"                          	",
+"                          	",
+"                          	"};
+
+
+void SBomber::AnimateScrolling()
+{
+    MyTools::FileLoggerSingletone::getInstance().WriteToLog(std::string(__FUNCTION__) + " was invoked");
+    const size_t windowHeight = 10; // Размер окна для скроллинга
+    const size_t startX = ScreenSingleton::getInstance().GetMaxX() / 2 - ScrollWidth / 2;
+    const size_t startY = ScreenSingleton::getInstance().GetMaxY() / 2 - windowHeight / 2;
+    double curPos = 0;
+    do {
+            TimeStart();
+            ScreenSingleton::getInstance().ClrScr();
+
+            // вывод windowHeight строк из ppScroll используя смещение curPos
+
+            ScreenSingleton::getInstance().SetColor(CC_Yellow);
+            for (int i=0;i<curPos;++i) {
+                int a=startY+windowHeight-i;
+                if (a>0) {
+                 ScreenSingleton::getInstance().GotoXY(startX, a);
+                 std::cout << ppScroll[int(curPos)-i];
+                };
+            };
+
+            ScreenSingleton::getInstance().GotoXY(0, 0);
+            TimeFinish();
+            curPos += deltaTime * 0.0015;
+
+    } while (!_kbhit() && int(curPos) <= (ScrollHeight - windowHeight));
+    ScreenSingleton::getInstance().ClrScr();
+}
diff --git a/src/main.cpp b/src/main.cpp
index e4a2756..741fc6a 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -4,31 +4,8 @@
 
 #include <iostream>
 #include <fstream>
-#include <unistd.h>
-#include <fcntl.h>
-#include <termios.h>
-#include <sys/ioctl.h>
 
-int _kbhit()
-{
-    static const int STDIN = 0;
-    static bool initialized = false;
-
-    if (!initialized)
-    {
-        // Use termios to turn off line buffering
-        termios term;
-        tcgetattr(STDIN, &term);
-        term.c_lflag &= ~ICANON;
-        tcsetattr(STDIN, TCSANOW, &term);
-        setbuf(stdin, NULL);
-        initialized = true;
-    }
-
-    int bytesWaiting;
-    ioctl(STDIN, FIONREAD, &bytesWaiting);
-    return bytesWaiting;
-}
+#include "include/kbd.h"
 
 int main(void)
 {
@@ -57,5 +34,7 @@ int main(void)
 
     MyTools::FileLoggerSingletone::getInstance().CloseLogFile();
 
+    game.AnimateScrolling(); // Вызов анимированного скроллинга
+
     return 0;
 }
